

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
        
import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf                                                                             #importing libraries
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import BatchNormalization
from keras.preprocessing.image import ImageDataGenerator

#model 


model=Sequential()
model.add(Conv2D(32,(5,5),input_shape=(300,300,3),activation="relu"))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation="relu"))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation="relu"))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation="relu"))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(32,(3,3),activation="relu"))
model.add(Flatten())
model.add(Dense(512,activation="relu"))
model.add(BatchNormalization())
model.add(Dense(256,activation="relu"))
model.add(BatchNormalization())
model.add(Dense(128,activation="relu"))
model.add(Dense(1,activation="sigmoid"))


model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy",tf.keras.metrics.Precision(name="precision"),
                                                                  tf.keras.metrics.Recall(name="recall")])

model.summary()

#preparing images

traindatagen=ImageDataGenerator(rescale=1/255)
testdatagen=ImageDataGenerator(rescale=1/255)

train_generator=traindatagen.flow_from_directory("../input/chest-xray-pneumonia/chest_xray/train",
                                                 class_mode="binary",
                                                 batch_size=64,
                                                 target_size=(300,300))
val_generator=testdatagen.flow_from_directory("../input/chest-xray-pneumonia/chest_xray/test",
                                                 class_mode="binary",
                                                batch_size=64,
                                                 target_size=(300,300))
ncount = len([name for name in os.listdir('../input/chest-xray-pneumonia/chest_xray/train/NORMAL')])
pcount = len([name for name in os.listdir('../input/chest-xray-pneumonia/chest_xray/train/PNEUMONIA')])

checkpoint=tf.keras.callbacks.ModelCheckpoint("../input/output/kaggle/working/pneumonia.h5",save_best_only=True)

early_stopping=tf.keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)
def scheduler(epoch):
    if epoch<10:
        return 0.001
    else:
        return 0.001*tf.math.exp(0.1*(10-epoch))

learning_rate_scheduler=tf.keras.callbacks.LearningRateScheduler(scheduler)
callbacks=[checkpoint,early_stopping,learning_rate_scheduler]


class_weight = {0: ((ncount+pcount)/ncount)/2 ,1: ((ncount+pcount)/pcount)/2}
print('Weight for Class NORMAL:', class_weight[0])
print('Weight for Class PNEUMONIA:', class_weight[1])

history=model.fit(train_generator,validation_data=val_generator,steps_per_epoch=10,epochs=20,class_weight=class_weight,callbacks=callbacks)

#evaluating the model

fig, ax = plt.subplots(1, 4, figsize=(20,3))
ax = ax.ravel()

for i, met in enumerate(['precision','recall','accuracy', 'loss']):
    ax[i].plot(history.history[met])
    ax[i].plot(history.history['val_' + met])
    ax[i].set_title('Model {}'.format(met))
    ax[i].set_xlabel('epochs')
    ax[i].set_ylabel(met)
    ax[i].legend(['train', 'val'])
    
    
    testdatagen = ImageDataGenerator(rescale = 1/255)

test_generator = testdatagen.flow_from_directory(
    '../input/chest-xray-pneumonia/chest_xray/test/',
    target_size = (300, 300),
    batch_size = 64, 
    class_mode = 'binary'
)




result = model.evaluate_generator(test_generator, 624)

print("loss at eval data:", result[0])
print('accuracy at eval data:', result[1])
print("precision at eval data:", result[2])
print("recall at eval data:", result[3])


